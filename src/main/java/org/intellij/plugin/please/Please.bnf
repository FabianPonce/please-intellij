{
    parserClass="org.intellij.plugin.please.parser.PleaseParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Please"
    psiImplClassSuffix="Impl"
    psiPackage="org.intellij.plugin.please.psi"
    psiImplPackage="org.intellij.plugin.please.psi.impl"

    elementTypeHolderClass="org.intellij.plugin.please.psi.PleaseTypes"
    elementTypeClass="org.intellij.plugin.please.psi.PleaseElementType"
    tokenTypeClass="org.intellij.plugin.please.psi.PleaseTokenType"

    tokens = [
        EQ = "="
        PLUS = "+"
        MINUS = "-"
        LPAREN = "("
        RPAREN = ")"
        LBRACK = "["
        RBRACK = "]"
        LBRACE = "{"
        RBRACE = "}"
        PIPE = "|"
        COMMA = ","
        DEF = "def"
        COLON=":"
        PASS = "pass"
        CONTINUE = "continue"

        TRUE_LIT = "True"
        FALSE_LIT = "False"
        INT_LIT = "regexp:[0-9]+"
        STR_LIT = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
        COMMENT = "regexp:(#)[^\r\n]*"
        DOC_COMMENT = "regexp:(\"\"\")[^\r\n]*"
        IDENT = 'regexp:([a-zA-Z]+|_)([a-zA-Z]|[0-9]|_)*'

        space = "regexp:\w+"
    ]
}

pleaseFile ::= (statement)*
statement ::= (functionDef | expression | assignment | PASS | CONTINUE)

assignment ::= IDENT (COMMA IDENT)* EQ expression


functionDef ::= DEF IDENT LPAREN OPEN_BLOCK*  [ functionDefParam (COMMA functionDefParam)* ] COMMA? CLOSE_BLOCK* RPAREN COLON OPEN_BLOCK statement+ CLOSE_BLOCK
functionDefParam ::= IDENT [COLON type [PIPE type+] [ EQ expression] ]
type ::= IDENT

expression ::= [ MINUS | NOT ] value [operator expression] [ IF expression ELSE expression ]
value ::= functionCall | INT_LIT | STR_LIT | listLit | dictLit | boolLit


functionCall ::= IDENT LPAREN OPEN_BLOCK* [ functionCallParam (COMMA functionCallParam)* ] COMMA? CLOSE_BLOCK* RPAREN
functionCallParam ::= (expression | IDENT "=" expression)


boolLit ::= TRUE_LIT | FALSE_LIT
listLit ::= LBRACK OPEN_BLOCK* [expression [ (COMMA expression)* ] ] COMMA? CLOSE_BLOCK* RBRACK
dictLit ::= LBRACE OPEN_BLOCK* [STR_LIT COLON expression [COMMA STR_LIT COLON expression]] COMMA? CLOSE_BLOCK* RBRACE

operator ::= (PLUS | MINUS | TIMES | DIVIDE | PERCENT | LEFT_CHEV | RIGHT_CHEV | AND | OR |
            IS | IS NOT | IN | NOT IN | EQUALS | NOT_EQUALS | GTE | LTE | PIPE)