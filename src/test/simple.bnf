{
    tokens = [
        EQ = "="
        LPAREN = "("
        RPAREN = ")"
        LBRACK = "["
        RBRACK = "]"
        LBRACE = "{"
        RBRACE = "}"
        PIPE = "|"
        COMMA = ","
        DEF = "def"
        COLON=":"
        PASS = "pass"
        CONTINUE = "continue"

        TRUE_LIT = "True"
        FALSE_LIT = "False"
        INT_LIT = "regexp:[0-9]+"
        STR_LIT = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
        COMMENT = "regexp:(#)[^\r\n]*"
        IDENT = 'regexp:([a-zA-Z]+|_)([a-zA-Z]|[0-9]|_)*'

        EOL = "regexp:\n"
        space = "regexp: +"
    ]
}

pleaseFile ::= (statement)* EOL*
statement ::= (functionCall | assignment | functionDef | PASS | CONTINUE) EOL*

assignment ::= IDENT (COMMA IDENT)* EQ expression

functionCall ::= IDENT LPAREN EOL* [ functionCallParam (COMMA EOL* functionCallParam)* ] COMMA? EOL* RPAREN
functionCallParam ::= (expression | IDENT "=" expression) EOL*

functionDef ::= DEF IDENT LPAREN [ functionDefParam (COMMA functionDefParam)* ] COMMA? EOL* RPAREN COLON EOL+ statement+
functionDefParam ::= IDENT [COLON type [PIPE type+] [ EQ expression] ]
type ::= "str" | "int" | "list" | "dict"

expression ::= INT_LIT | STR_LIT | list | dict | bool
bool ::= TRUE_LIT | FALSE_LIT
list ::= LBRACK EOL* [expression [ (COMMA EOL* expression)* ] ] COMMA? EOL* RBRACK
dict ::= LBRACE EOL* [STR_LIT COLON expression [COMMA EOL* STR_LIT COLON expression]] COMMA? EOL* RBRACE
